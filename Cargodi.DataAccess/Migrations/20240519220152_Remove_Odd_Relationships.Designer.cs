// <auto-generated />
using System;
using Cargodi.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cargodi.DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240519220152_Remove_Odd_Relationships")]
    partial class Remove_Odd_Relationships
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarTypeCategory", b =>
                {
                    b.Property<int>("CarTypesId")
                        .HasColumnType("int");

                    b.Property<string>("CategoriesName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CarTypesId", "CategoriesName");

                    b.HasIndex("CategoriesName");

                    b.ToTable("CarTypeCategory");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsNorth")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWest")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Autopark.Autopark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Autoparks");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Autopark.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActualAutoparkId")
                        .HasColumnType("int");

                    b.Property<int>("AutoparkId")
                        .HasColumnType("int");

                    b.Property<int>("CapacityHeight")
                        .HasColumnType("int");

                    b.Property<int>("CapacityLength")
                        .HasColumnType("int");

                    b.Property<int>("CapacityWidth")
                        .HasColumnType("int");

                    b.Property<int>("CarTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Carrying")
                        .HasColumnType("int");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Mark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Range")
                        .HasColumnType("int");

                    b.Property<int>("TankVolume")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActualAutoparkId");

                    b.HasIndex("AutoparkId");

                    b.HasIndex("CarTypeId");

                    b.HasIndex("LicenseNumber")
                        .IsUnique();

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Autopark.CarType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CarType");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Autopark.Trailer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActualAutoparkId")
                        .HasColumnType("int");

                    b.Property<int>("AutoparkId")
                        .HasColumnType("int");

                    b.Property<int>("CapacityHeight")
                        .HasColumnType("int");

                    b.Property<int>("CapacityLength")
                        .HasColumnType("int");

                    b.Property<int>("CapacityWidth")
                        .HasColumnType("int");

                    b.Property<int>("Carrying")
                        .HasColumnType("int");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TrailerTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActualAutoparkId");

                    b.HasIndex("AutoparkId");

                    b.HasIndex("LicenseNumber")
                        .IsUnique();

                    b.HasIndex("TrailerTypeId");

                    b.ToTable("Trailers");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Autopark.TrailerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TrailerType");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Order.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AcceptTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<long>("DeliverAddressId")
                        .HasColumnType("bigint");

                    b.Property<long>("LoadAddressId")
                        .HasColumnType("bigint");

                    b.Property<int>("OperatorId")
                        .HasColumnType("int");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DeliverAddressId");

                    b.HasIndex("LoadAddressId");

                    b.HasIndex("OperatorId");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Order.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "processing"
                        },
                        new
                        {
                            Id = 2,
                            Name = "accepted"
                        },
                        new
                        {
                            Id = 4,
                            Name = "declined"
                        });
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Order.Payload", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<int>("PayloadTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PublicTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PayloadTypeId");

                    b.ToTable("Payloads");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Order.PayloadType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PayloadType");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Ship.Ship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AutoparkFinishId")
                        .HasColumnType("int");

                    b.Property<int>("AutoparkStartId")
                        .HasColumnType("int");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Finish")
                        .HasColumnType("datetime2");

                    b.Property<int>("OperatorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrailerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AutoparkFinishId");

                    b.HasIndex("AutoparkStartId");

                    b.HasIndex("CarId");

                    b.HasIndex("OperatorId");

                    b.HasIndex("TrailerId");

                    b.ToTable("Ships");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Ship.Stop", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<short>("Number")
                        .HasColumnType("smallint");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<int>("ShipId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ShipId");

                    b.ToTable("Stops");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Staff.Category", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Staff.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Staff.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActualAutoparkId")
                        .HasColumnType("int");

                    b.Property<int>("AutoparkId")
                        .HasColumnType("int");

                    b.Property<int?>("CarTypeId")
                        .HasColumnType("int");

                    b.Property<int>("DriverStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EmployDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("License")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ActualAutoparkId");

                    b.HasIndex("AutoparkId");

                    b.HasIndex("CarTypeId");

                    b.HasIndex("DriverStatusId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Staff.DriverStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DriverStatuses");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Staff.Operator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AutoparkId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EmployDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AutoparkId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Operators");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CategoryDriver", b =>
                {
                    b.Property<string>("CategoriesName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DriversId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesName", "DriversId");

                    b.HasIndex("DriversId");

                    b.ToTable("CategoryDriver");
                });

            modelBuilder.Entity("DriverShip", b =>
                {
                    b.Property<int>("DriversId")
                        .HasColumnType("int");

                    b.Property<int>("ShipsId")
                        .HasColumnType("int");

                    b.HasKey("DriversId", "ShipsId");

                    b.HasIndex("ShipsId");

                    b.ToTable("DriverShip");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CarTypeCategory", b =>
                {
                    b.HasOne("Cargodi.DataAccess.Entities.Autopark.CarType", null)
                        .WithMany()
                        .HasForeignKey("CarTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargodi.DataAccess.Entities.Staff.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Autopark.Autopark", b =>
                {
                    b.HasOne("Cargodi.DataAccess.Entities.Address", "Address")
                        .WithMany("Autoparks")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Autopark.Car", b =>
                {
                    b.HasOne("Cargodi.DataAccess.Entities.Autopark.Autopark", "ActualAutopark")
                        .WithMany("ActualCars")
                        .HasForeignKey("ActualAutoparkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Cargodi.DataAccess.Entities.Autopark.Autopark", "Autopark")
                        .WithMany("Cars")
                        .HasForeignKey("AutoparkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargodi.DataAccess.Entities.Autopark.CarType", "CarType")
                        .WithMany()
                        .HasForeignKey("CarTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActualAutopark");

                    b.Navigation("Autopark");

                    b.Navigation("CarType");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Autopark.Trailer", b =>
                {
                    b.HasOne("Cargodi.DataAccess.Entities.Autopark.Autopark", "ActualAutopark")
                        .WithMany("ActualTrailers")
                        .HasForeignKey("ActualAutoparkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Cargodi.DataAccess.Entities.Autopark.Autopark", "Autopark")
                        .WithMany("Trailers")
                        .HasForeignKey("AutoparkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargodi.DataAccess.Entities.Autopark.TrailerType", "TrailerType")
                        .WithMany("Trailers")
                        .HasForeignKey("TrailerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActualAutopark");

                    b.Navigation("Autopark");

                    b.Navigation("TrailerType");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Order.Order", b =>
                {
                    b.HasOne("Cargodi.DataAccess.Entities.Staff.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargodi.DataAccess.Entities.Address", "DeliverAddress")
                        .WithMany("DeliveryOrders")
                        .HasForeignKey("DeliverAddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Cargodi.DataAccess.Entities.Address", "LoadAddress")
                        .WithMany("LoadOrders")
                        .HasForeignKey("LoadAddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Cargodi.DataAccess.Entities.Staff.Operator", "Operator")
                        .WithMany("Orders")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Cargodi.DataAccess.Entities.Order.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("DeliverAddress");

                    b.Navigation("LoadAddress");

                    b.Navigation("Operator");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Order.Payload", b =>
                {
                    b.HasOne("Cargodi.DataAccess.Entities.Order.Order", "Order")
                        .WithMany("Payloads")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargodi.DataAccess.Entities.Order.PayloadType", "PayloadType")
                        .WithMany("Payloads")
                        .HasForeignKey("PayloadTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PayloadType");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Ship.Ship", b =>
                {
                    b.HasOne("Cargodi.DataAccess.Entities.Autopark.Autopark", "AutoparkFinish")
                        .WithMany("ShipFinishes")
                        .HasForeignKey("AutoparkFinishId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Cargodi.DataAccess.Entities.Autopark.Autopark", "AutoparkStart")
                        .WithMany("ShipStarts")
                        .HasForeignKey("AutoparkStartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Cargodi.DataAccess.Entities.Autopark.Car", "Car")
                        .WithMany("Ships")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Cargodi.DataAccess.Entities.Staff.Operator", "Operator")
                        .WithMany()
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargodi.DataAccess.Entities.Autopark.Trailer", "Trailer")
                        .WithMany("Ships")
                        .HasForeignKey("TrailerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AutoparkFinish");

                    b.Navigation("AutoparkStart");

                    b.Navigation("Car");

                    b.Navigation("Operator");

                    b.Navigation("Trailer");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Ship.Stop", b =>
                {
                    b.HasOne("Cargodi.DataAccess.Entities.Order.Order", "Order")
                        .WithMany("Stops")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargodi.DataAccess.Entities.Ship.Ship", "Ship")
                        .WithMany("Stops")
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Ship");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Staff.Client", b =>
                {
                    b.HasOne("Cargodi.DataAccess.Entities.User", "User")
                        .WithOne("Client")
                        .HasForeignKey("Cargodi.DataAccess.Entities.Staff.Client", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Staff.Driver", b =>
                {
                    b.HasOne("Cargodi.DataAccess.Entities.Autopark.Autopark", "ActualAutopark")
                        .WithMany("ActualDrivers")
                        .HasForeignKey("ActualAutoparkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Cargodi.DataAccess.Entities.Autopark.Autopark", "Autopark")
                        .WithMany("Drivers")
                        .HasForeignKey("AutoparkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargodi.DataAccess.Entities.Autopark.CarType", null)
                        .WithMany("Cars")
                        .HasForeignKey("CarTypeId");

                    b.HasOne("Cargodi.DataAccess.Entities.Staff.DriverStatus", "DriverStatus")
                        .WithMany("Drivers")
                        .HasForeignKey("DriverStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargodi.DataAccess.Entities.User", "User")
                        .WithOne("Driver")
                        .HasForeignKey("Cargodi.DataAccess.Entities.Staff.Driver", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActualAutopark");

                    b.Navigation("Autopark");

                    b.Navigation("DriverStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Staff.Operator", b =>
                {
                    b.HasOne("Cargodi.DataAccess.Entities.Autopark.Autopark", "Autopark")
                        .WithMany("Operators")
                        .HasForeignKey("AutoparkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Cargodi.DataAccess.Entities.User", "User")
                        .WithOne("Operator")
                        .HasForeignKey("Cargodi.DataAccess.Entities.Staff.Operator", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Autopark");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CategoryDriver", b =>
                {
                    b.HasOne("Cargodi.DataAccess.Entities.Staff.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargodi.DataAccess.Entities.Staff.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DriverShip", b =>
                {
                    b.HasOne("Cargodi.DataAccess.Entities.Staff.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargodi.DataAccess.Entities.Ship.Ship", null)
                        .WithMany()
                        .HasForeignKey("ShipsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Cargodi.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Cargodi.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargodi.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Cargodi.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Address", b =>
                {
                    b.Navigation("Autoparks");

                    b.Navigation("DeliveryOrders");

                    b.Navigation("LoadOrders");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Autopark.Autopark", b =>
                {
                    b.Navigation("ActualCars");

                    b.Navigation("ActualDrivers");

                    b.Navigation("ActualTrailers");

                    b.Navigation("Cars");

                    b.Navigation("Drivers");

                    b.Navigation("Operators");

                    b.Navigation("ShipFinishes");

                    b.Navigation("ShipStarts");

                    b.Navigation("Trailers");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Autopark.Car", b =>
                {
                    b.Navigation("Ships");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Autopark.CarType", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Autopark.Trailer", b =>
                {
                    b.Navigation("Ships");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Autopark.TrailerType", b =>
                {
                    b.Navigation("Trailers");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Order.Order", b =>
                {
                    b.Navigation("Payloads");

                    b.Navigation("Stops");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Order.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Order.PayloadType", b =>
                {
                    b.Navigation("Payloads");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Ship.Ship", b =>
                {
                    b.Navigation("Stops");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Staff.DriverStatus", b =>
                {
                    b.Navigation("Drivers");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.Staff.Operator", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Cargodi.DataAccess.Entities.User", b =>
                {
                    b.Navigation("Client");

                    b.Navigation("Driver");

                    b.Navigation("Operator");
                });
#pragma warning restore 612, 618
        }
    }
}
